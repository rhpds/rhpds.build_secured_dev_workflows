---
- name: Check if helm is installed
  ansible.builtin.command: command -v helm
  register: git_helm
  ignore_errors: true

- name: Install helm if not present
  when: git_helm.rc != 0
  become: true
  ansible.builtin.shell: |
    curl -LO https://get.helm.sh/helm-{{ rhpds_build_secured_dev_workflows_openshfit_gitops_helm_cli_version }}-linux-amd64.tar.gz
    tar -zxvf helm-{{ rhpds_build_secured_dev_workflows_openshfit_gitops_helm_cli_version }}-linux-amd64.tar.gz
    mv linux-amd64/helm /usr/local/bin/helm
  args:
    chdir: /tmp

- name: Clone janus demo repository
  ansible.builtin.git:
    accept_hostkey: true
    force: true
    repo: "{{ rhpds_build_secured_dev_workflows_openshfit_gitops_infra_bootstrap_repo }}"
    dest: "~/infra-bootstrap"
    version: "{{ rhpds_build_secured_dev_workflows_openshfit_gitops_infra_bootstrap_repo_revision }}"
  environment:
    GIT_SSL_NO_VERIFY: "true"

- name: Install GitOps Helm Chart
  kubernetes.core.helm:
    state: present
    name: argocd
    namespace: tssc-gitops
    chart_ref: ~/infra-bootstrap/charts/gitops-operator
    values:
      namespaces:
        - tssc-gitops
        - openshift-gitops
      projects:
        - name: janus
          namespace: tssc-gitops
          role: automation
    create_namespace: true
  register: r_helm_gitops
  until: r_helm_gitops is not failed
  retries: 10
  delay: 10

- name: Wait until ArgoCD openshift-gitops secrets are ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ item }}"
    namespace: openshift-gitops
  loop:
  - argocd-cluster
  - argocd-secret
  register: r_openshift_gitops_secrets
  until:
  - r_openshift_gitops_secrets is defined
  - r_openshift_gitops_secrets.resources is defined
  - r_openshift_gitops_secrets.resources | length > 0
  retries: 120
  delay: 10

- name: Wait until ArgoCD tssc-gitops secrets are ready
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ item }}"
    namespace: tssc-gitops
  loop:
  - argocd-cluster
  - argocd-secret
  register: r_janus_argocd_secrets
  until:
  - r_janus_argocd_secrets is defined
  - r_janus_argocd_secrets.resources is defined
  - r_janus_argocd_secrets.resources | length > 0
  retries: 120
  delay: 10

- name: Patch {{ item }} admin password
  kubernetes.core.k8s:
    api_version: v1
    kind: Secret
    name: argocd-cluster
    namespace: "{{ item }}"
    merge_type: merge
    definition:
      stringData:
        admin.password: "{{ rhpds_build_secured_dev_workflows_openshfit_gitops_argocd_password }}"
  loop:
  - tssc-gitops
  - openshift-gitops
  register: r_patch_secret
  until: r_patch_secret is succeeded
  retries: 120
  delay: 10

- name: Delete {{ item }} main secret to trigger regeneration
  kubernetes.core.k8s:
    api_version: v1
    kind: Secret
    name: argocd-secret
    namespace: "{{ item }}"
    state: absent
  loop:
  - tssc-gitops
  - openshift-gitops
  register: r_delete_secret
  until: r_delete_secret is succeeded
  retries: 120
  delay: 10

- name: Wait until default project is ready
  kubernetes.core.k8s_info:
    api_version: argoproj.io/v1alpha1
    kind: AppProject
    name: default
    namespace: openshift-gitops
  register: r_defaul_proj
  until:
    - r_defaul_proj is defined
    - r_defaul_proj.resources is defined
    - r_defaul_proj.resources | length > 0
  retries: 120
  delay: 10

